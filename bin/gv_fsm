#!/usr/bin/env ruby

require "gv_fsm"
require 'optparse'

sm = GV_FSM::FSM.new

options = {header: true, source: true}
op = OptionParser.new do |parser|
  parser.banner =<<~EOB 
  Graphviz to Finite State Machine generator
  Version: #{GV_FSM::VERSION}
  See also https://github.com/pbosetti/gv_fsm
  
  Usage: gv_fsm [options] scheme.dot
  EOB

  parser.on("-p", "--project PROJECT_NAME",
            "Set the project name to PROJECT_NAME") do |pn|
    sm.project_name = pn
  end

  parser.on("-d", "--description DESCRIPTION", "Use DESCRITION string in header") do |desc|
    sm.description = desc
  end

  parser.on("-o", "--output_file NAME", "Use NAME for generated .c and .h files") do |f|
    sm.cname = f
  end

  parser.on("-e", "--header-only", "Only generate header file") do
    options[:source] = false
  end

  parser.on("-s", "--source-only", "Only generate source file") do
    options[:header] = false
  end

  parser.on("-x", "--prefix PREFIX", "Prepend PREFIX to names of generated functions and objects") do |p|
    sm.prefix = p
  end

  parser.on("-i", "--ino", "Generate a single .ino file (for Arduino)") do
    sm.ino = true
  end

  parser.on("-l", "--no-syslog", "Omit syslog calls in stub functions") do
    sm.syslog = false
  end

  parser.on("-h", "--help", "Prints this help") do
    puts parser
    exit
  end

end

op.parse!

unless ARGV[0]
  STDERR.puts "ERROR: I need the path to a Graphviz file!\n\n"
  STDERR.puts op
  exit
end
unless File.extname(ARGV[0]) == ".dot"
  STDERR.puts "ERROR: #{ARGV[0]} does not look like a Graphviz file!\n\n"
  STDERR.puts op
  exit
end

sm.parse(ARGV[0])

puts "Parsed #{sm.dotfile}.\nGenerating C stub for states: #{sm.states_list.join(", ")}."
if sm.ino then
  sm.generate_ino
  puts "Generated .ino file #{sm.cname}.ino"
else
  if options[:header] then
    sm.generate_h 
    puts "Generated header #{sm.cname}.h"
  end
  if options[:source] then
    sm.generate_c 
    puts "Generated source #{sm.cname}.c"
  end
end

