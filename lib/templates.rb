
module GV_FSM
  module Templates
    HEADER =<<~EOHEADER
      // Finite State Machine
      // Project: <%= @project_name or @dotfile %>
      // Description: <%= @description or "<none given>" %>
      //
      // Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
      // gv_fsm version <%= GV_FSM::VERSION %>
      // Generation date: <%= Time.now %>
      // Generated from: <%= @dotfile %>
      // The finite state machine has:
      //   <%= @states.count %> states
      //   <%= @transitions.count %> transitions
      //   <%= transition_functions_list.select {|e| e != 'NULL'}.count %> transition functions

    EOHEADER

    HH =<<~EOH
      #ifndef <%= @cname.upcase %>_H
      #define <%= @cname.upcase %>_H
      #include <stdlib.h>

      // List of states
      typedef enum {
      <% @states.each_with_index do |s, i| %>
        <%= @prefix.upcase %>STATE_<%= s[:id].upcase %><%= i == 0 ? " = 0" : "" %>,  
      <% end %>
        <%= @prefix.upcase %>NUM_STATES,
        <%= @prefix.upcase %>NO_CHANGE
      } state_t;

      const char *state_names[] = {<%= states_list.map {|sn| '"'+sn+'"'}.join(", ") %>};

      // State function and state transition prototypes
      typedef state_t state_func_t(void *data);
      typedef void transition_func_t(void *data);

      // state functions
      <% @states.each do |s| %>
      state_t <%= s[:function] %>(void *data);
      <% end %>

      // List of state functions
      state_func_t *const <%= @prefix %>state_table[<%= @prefix.upcase %>NUM_STATES] = {
        <%= state_functions_list.join(",\n  ")%>
      };
      
      <% if transition_functions_list.count > 0 then %>
      // transition functions
      <% transition_functions_list.each do |t| %>
      <% next if t == "NULL" %>
      void <%= t %>(void *data);
      <% end %>

      // Table of transition functions
      transition_func_t *const <%= @prefix %>transition_table[<%= @prefix.upcase %>NUM_STATES][<%= @prefix.upcase %>NUM_STATES] = {
      <% sl = states_list %>
      <% fw = transition_functions_list.max {|a, b| a.length <=> b.length}.length %>
      <% sw = states_list.max {|a, b| a.length <=> b.length}.length %>
        /* <%= "states:".ljust(sw) %>     <%= sl.map {|e| e.ljust(fw) }.join(", ") %> */
      <% transitions_map.each_with_index do |l, i| %>
        /* <%= sl[i].ljust(sw) %> */ {<%= l.map {|e| e.ljust(fw)}.join(", ") %>}, 
      <% end %>
      };
      <% else %>
      // No transition functions
      <% end %>

      // state manager
      state_t <%= @prefix %>run_state(state_t cur_state, void *data);
      
      #endif
    EOH

    CC =<<~EOC
      #include <syslog.h>
      #include "<%= @cname %>.h"
      
      //  ____  _        _       
      // / ___|| |_ __ _| |_ ___ 
      // \\___ \\| __/ _` | __/ _ \\
      //  ___) | || (_| | ||  __/
      // |____/ \\__\\__,_|\\__\\___|
      //                         
      //   __                  _   _                 
      //  / _|_   _ _ __   ___| |_(_) ___  _ __  ___ 
      // | |_| | | | '_ \\ / __| __| |/ _ \\| '_ \\/ __|
      // |  _| |_| | | | | (__| |_| | (_) | | | \\__ \\
      // |_|  \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|___/
      //                                             
      <% dest = destinations.dup %>
      <% @states.each do |s| %>
      <% stable = true if dest[s[:id]].include? s[:id] %>
      <% dest[s[:id]].map! {|n| (@prefix+"STATE_"+n).upcase} %>
      <% if dest[s[:id]].empty? or stable then
        dest[s[:id]].unshift @prefix.upcase+"NO_CHANGE"
      end %>
      // To be executed in state <%= s[:id] %>
      state_t <%= s[:function] %>(void *data) {
        state_t next_state = <%= dest[s[:id]].first %>;

        syslog(LOG_INFO, "[FSM] In state <%= s[:id] %>");
        /* Your code here */
        
        // valid return states: <%= dest[s[:id]].join(", ") %>
        switch (next_state) {
      <% dest[s[:id]].each  do |str| %>
          case <%= str %>:
      <% end %>
            break;
          default:
            syslog(LOG_WARNING, "[FSM] Cannot pass from <%= s[:id] %> to %s, remaining in this state", state_names[next_state]);
            next_state = <%= @prefix.upcase %>NO_CHANGE;
        }
        return next_state;
      }

      <% end %>

      <% if transition_functions_list.count > 0 then %>
      //  _____                    _ _   _              
      // |_   _| __ __ _ _ __  ___(_) |_(_) ___  _ __   
      //   | || '__/ _` | '_ \\/ __| | __| |/ _ \\| '_ \\
      //   | || | | (_| | | | \\__ \\ | |_| | (_) | | | | 
      //   |_||_|  \\__,_|_| |_|___/_|\\__|_|\\___/|_| |_| 
      //                                                
      //   __                  _   _                 
      //  / _|_   _ _ __   ___| |_(_) ___  _ __  ___ 
      // | |_| | | | '_ \\ / __| __| |/ _ \\| '_ \\/ __|
      // |  _| |_| | | | | (__| |_| | (_) | | | \\__ \\
      // |_|  \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|___/
      //    
                                               
      <% transition_functions_list.each do |t| %>
      <% next if t == "NULL" %>
      // This function is called in transitions:
      <% transitions_paths[t].each do |e| %>
      // from <%= e[:from] %> to <%= e[:to] %>
      <% end %>
      void <%= t %>(void *data) {
        syslog(LOG_INFO, "[FSM] State transition <%= t %>");
        /* Your code here */
      }

      <% end %>
      <% end %>

      //  ____  _        _        
      // / ___|| |_ __ _| |_ ___  
      // \\___ \\| __/ _` | __/ _ \\
      //  ___) | || (_| | ||  __/ 
      // |____/ \\__\\__,_|\\__\\___| 
      //                          
      //                                              
      //  _ __ ___   __ _ _ __   __ _  __ _  ___ _ __ 
      // | '_ ` _ \\ / _` | '_ \\ / _` |/ _` |/ _ \\ '__|
      // | | | | | | (_| | | | | (_| | (_| |  __/ |   
      // |_| |_| |_|\\__,_|_| |_|\\__,_|\\__, |\\___|_|   
      //                              |___/           

      state_t <%= @prefix %>run_state(state_t cur_state, void *data) {
        state_t new_state = <%= @prefix %>state_table[cur_state](data);
      <% if transition_functions_list.count > 0 then %>
        transition_func_t *transition = <%= @prefix %>transition_table[cur_state][new_state];
        if (transition)
          transition(data);
      <% end %>
        return new_state == <%= @prefix.upcase %>NO_CHANGE ? cur_state : new_state;
      };


      #ifdef TEST_MAIN
      #include <unistd.h>
      int main() {
        state_t cur_state = <%= @prefix.upcase %>STATE_INIT;
        openlog("SM", LOG_PID | LOG_PERROR, LOG_USER);
        syslog(LOG_INFO, "Starting SM");
        do {
          cur_state = run_state(cur_state, NULL);
          sleep(1);
        } while (cur_state != <%= @prefix.upcase %>STATE_STOP);
        return 0;
      }
      #endif
    EOC
  end
end